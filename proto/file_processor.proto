// Define a versão do Protocol Buffers usada
syntax = "proto3";

// Define o pacote para evitar conflitos de nomes
package file_processor;

// Mensagem para representar um chunk de dados binários (parte de um arquivo)
message Chunk {
  bytes content = 1; // Conteúdo binário do chunk
}

// Mensagem para metadados da resposta, usada em todos os serviços
message ResponseMetadata {
  string file_name = 1; // Nome do arquivo de saída
  string status_message = 2; // Mensagem de status (e.g., "Sucesso" ou erro)
  bool success = 3; // Indica se a operação foi bem-sucedida
}

// Mensagem para resposta, que pode conter metadados ou um chunk de dados
message ResponseChunk {
  oneof payload { // Usa oneof para enviar metadados ou chunk
    ResponseMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

// --- CompressPDF ---
// Metadados para o serviço CompressPDF
message CompressMetadata {
  string file_name = 1; // Nome do arquivo PDF de entrada
}

// Mensagem para chunks de requisição do CompressPDF
message CompressRequestChunk {
  oneof payload { // Metadados ou chunk de dados
    CompressMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

// --- ConvertToTXT ---
// Metadados para o serviço ConvertToTXT
message ConvertToTXTMetadata {
  string file_name = 1; // Nome do arquivo PDF de entrada
}

// Mensagem para chunks de requisição do ConvertToTXT
message ConvertToTXTRequestChunk {
  oneof payload {
    ConvertToTXTMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

// --- ConvertImageFormat ---
// Metadados para o serviço ConvertImageFormat
message ConvertImageFormatMetadata {
  string file_name = 1; // Nome do arquivo de imagem de entrada
  string output_format = 2; // Formato desejado (e.g., "png", "jpg")
}

// Mensagem para chunks de requisição do ConvertImageFormat
message ConvertImageFormatRequestChunk {
  oneof payload {
    ConvertImageFormatMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

// --- ResizeImage ---
// Metadados para o serviço ResizeImage
message ResizeImageMetadata {
  string file_name = 1; // Nome do arquivo de imagem de entrada
  int32 width = 2; // Largura desejada
  int32 height = 3; // Altura desejada
}

// Mensagem para chunks de requisição do ResizeImage
message ResizeImageRequestChunk {
  oneof payload {
    ResizeImageMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

// Definição do serviço gRPC com os quatro métodos
service FileProcessorService {
  // Comprime um PDF usando Ghostscript
  rpc CompressPDF(stream CompressRequestChunk) returns (stream ResponseChunk);
  // Converte PDF para TXT usando pdftotext
  rpc ConvertToTXT(stream ConvertToTXTRequestChunk) returns (stream ResponseChunk);
  // Converte formato de imagem usando ImageMagick
  rpc ConvertImageFormat(stream ConvertImageFormatRequestChunk) returns (stream ResponseChunk);
  // Redimensiona imagem usando ImageMagick
  rpc ResizeImage(stream ResizeImageRequestChunk) returns (stream ResponseChunk);
}
